[
{
	"uri": "https://fcacollin.github.io/guide/rmd_to_pdf/rmd2pdf_01.html",
	"title": "01 - Understand the pipeline",
	"tags": ["rmd"],
	"description": "",
	"content": "1 - Introduction The RStudio environment includes templates of R Markdown documents which propose as a configuration step to select a PDF output format. It is then very easy to render the document, actually simple as a click.\nsequenceDiagram participant Rmd participant pdf Rmd-pdf: knit button Rmd-pdf: = `rmarkdown::pdf_document()`  If starting is easy, the click (bait) is hidding complexity: the question of PDF output configuration is already more challenging (e.g. add a footnote, chance font):\n under the hood, at least three different nested high-level tools are chained together to handle the R Markdown document (R, Pandoc and a LaTeX engine), fine tuning a PDF document in R consists in passing arguments to the right one using the application interface proposed by R. two or three ways exist to convey the configuration code: either using a R function argument, or conveying settings via the yaml front matter of the R Markdown document, or eventually through a configuration file.  The aim of the present page is to provide an overview of the tools involved in the pipeline when triggering the rendering of the PDF document, and how to how to pass configuration elements to the right underlying tool.\nHow to start a PDF in RStudio: (1) File \u0026gt; New File \u0026gt; RMarkdown \u0026hellip; \u0026gt; Select output PDF and OK; (2) click the knit button at the top of the source pane.  2. Material and Methods A series of minimum working examples was generated to support the demonstration. The examples were built at the same time as the results below were reported.\nThe environment for the examples was containerized, a docker image and its definition was used to ensure reproducibility and / or enable the extenssion of the work (Nüst et al. 2020). The Docker definition was made publicly available at https://github.com/FCACollin/ayup_dock. Note that the image was not originally intended for this specific usage, this explains why it also includes some R packages and LaTeX dependencies not strictely necessary for the examples. However, the image as currently defined was also configured for a research task where pdf reporting was a requirement. Therefore, it was relevant to document the present examples based on this image used in real-life work.\nThe image includes:\n A rocker/verse image (4.1.0) A series of additional R packaes. A series of LaTeX dependencies.  In terms of pdf reporting, this image can:\n handles templates. use bibliographic references.  3 - Results 3.1 - R Markdown: render()/pdf_document() Producing a pdf document from a R Markdown (rmd) input is managed by R, but also involves Pandoc: R takes care of the conversion of the rmd file to a markdown file (md), and pandoc handles the conversion toward a pdf document. The rmarkdown\u0026rsquo;s functions render() and pdf_document() are high R level functions which can manages most of the features a user my need when generating a document.\nsequenceDiagram participant Rmd participant md participant pdf Rmd-md: R md-pdf: pandoc Rmd-pdf: rmarkdown::pdf_document() Note right of Rmd: keep_md=FALSEtoc=TRUE  For instance, the options can be used to keep the intermediary md file and also influence the output by adding a table of content (TOC).\n  The options above can be passed via the yaml frontmatter (e.g. rmd2pdf_01_03.Rmd):\n--- title: \u0026#34;Rmd to PDF\u0026#34; output: pdf_document: keep_md: true toc: true ---   or via an output function.\nrender( input = \u0026#34;rmd2pdf_01_02.Rmd\u0026#34;, output_format = pdf_document(toc = TRUE, keep_md = TRUE) )   render and pdf_document are functions exported by the rmarkdown package. Check ?rmarkdown::pdf_document \u0026rsquo;s help.\n 3.2 - Pass arguments to Pandoc Some options are handled by Pandoc. For Pandoc, configuration of an output is handled by variables for LaTeX . In the example above, the option TOC is conveyed to Pandoc directly. However, not all the possibilities offered by Pandoc, found an exact matching variable in R. This is when the pandoc_args argument from rmarkdown::pdf_document() is used to feed Pandoc variables for LaTeX.\nsequenceDiagram participant Rmd participant md participant pdf Rmd-+md: rmarkdown::pdf_document() Note right of Rmd: keep_md=FALSEtoc=TRUE md---pdf: Pandoc Note right of md: Variables For LaTeXfontfamily: libertinus-type1  The Pandoc variables for LaTeX can be provisionned by:\n the Rmarkdown document yaml front matter: --- title: \u0026#34;Rmd to PDF\u0026#34; output: pdf_document: keep_md: true toc: true fontfamily: libertinus-type1 ---  the pdf_document() function:  rmarkdown::render( input = \u0026#34;rmd2pdf_01_03.Rmd\u0026#34;, output_format = rmarkdown::pdf_document( toc = TRUE, pandoc_args = list( \u0026#34;--variable=fontfamily:libertinus-type1\u0026#34; ) ) ) 3.3 - Pass arguments to the LaTeX engine Pandoc itself is a high level programs which handles conversion between formats. A conversion toward a PDF document requires an intermediary LaTeX document later processed by a a LaTeX engine into pdf. Most of the expected functionnalities are translated via Pandoc, however, sometimes, LaTeX functionnalities are not covered and they must be conveyed from the original R Markdown document to the LaTeX document.\nsequenceDiagram participant Rmd participant md participant tex participant pdf Rmd-pdf: rmarkdown::pdf_document() Rmd-md: R Note right of Rmd: rmarkdown arguments md-+tex: Pandoc Note right of md: LaTeX Variables tex---pdf: LaTeX engine Note right of tex: Extra depencendiese.g. fancyhdr   The yaml frontmatter won\u0026rsquo;t be self sufficient anymore, the use of include/in_header points at a supplementary .tex file:  yaml:  --- title: \u0026#34;Rmd to PDF\u0026#34; output: pdf_document: latex_engine: xelatex keep_md: true toc: true includes: in_header: \u0026#34;preamble.tex\u0026#34; mainfont: DejaVuSansMono ---  preambule.tex:  \\usepackage{fancyhdr} \\pagestyle{fancy} \\fancyhead[L]{FCollin}  The use of pdf_document() is an interesting alternative, maybe more compact: rmarkdown::render( input = \u0026#34;rmd2pdf_01_04.Rmd\u0026#34;, output_format = rmarkdown::pdf_document( toc = TRUE, latex_engine = \u0026#34;xelatex\u0026#34;, pandoc_args = list(\u0026#34;--variable=mainfont:DejaVuSansMono\u0026#34;), extra_dependencies = list( rmarkdown::latex_dependency( \u0026#34;fancyhdr\u0026#34;, extra_lines = paste( \u0026#34;\\\\pagestyle{fancy}\u0026#34;, \u0026#34;\\\\fancyhead[L]{FCollin}\u0026#34; ) ) ) ) )   4. Discussion It was evidenced that the original raw pdf has generated by a simple click in RStudio, hides complexity. Entering the detail of this complexity and decomposing the pipeline brings a better understanding of the possible levels of configuration which can be addressed either through the R functions, the Pandoc interface or the LaTeX engine. The configuration of the output is also complex and may take advantage of a knowledge of the Pandoc command line interface, a better understanding of the YAML format for configuration, and a basic knowledge of LaTeX may also help in achieving a very well designed report. This complexity allows an incredible flexibility in the configuration of the reporting.\nHowever, the complexity can also be seen as hurdle: the increase number of programming languages decrease the likelyhood of finding contributors who can leverage the whole potential of pdf reporting with R Markdown. To aleviate this difficulty it is also possible to use templates: in other word, the confirguration of a pdf output is a one-off, it is a deliverable itself which can be injected in many reporting task (think about it as a corporate Microsoft word template).\nThe pdf reporting as presented above, is an illustration of the mecanisms involved to convert a R Markdown file into a document. The same applies to render docx, html or other: the markdown file being at the cross road and pandoc involved to the final conversion. As for the pdf documents, all output can take advantage of templates, and markup languages (e.g. LaTeX or html) accepts headers or other additional configuration files.\nReferences Nüst, Daniel, Vanessa Sochat, Ben Marwick, Stephen J Eglen, Tim Head, Tony Hirst, and Benjamin D Evans. 2020. “Ten Simple Rules for Writing Dockerfiles for Reproducible Data Science.” Public Library of Science San Francisco, CA USA. https://doi.org/10.1371/journal.pcbi.1008316.\n"
},
{
	"uri": "https://fcacollin.github.io/guide/rmd_to_pdf/rmd2pdf_02.html",
	"title": "02 - Templates and extended features",
	"tags": ["rmd"],
	"description": "",
	"content": "1 - Introduction In the previous section,\nsequenceDiagram participant Rmd participant md participant tex participant pdf Rmd-pdf: rmarkdown::pdf_document() Rmd-md: R Note right of Rmd: rmarkdown arguments md-+tex: Pandoc Note right of md: LaTeX Variables tex---pdf: LaTeX engine Note right of tex: Extra depencendiese.g. fancyhdr  2. Material and Methods A series of minimum working examples was generated to support the demonstration. The examples were built at the same time as the results below were reported.\nThe environment for the examples was containerized, a docker image and its definition was used to ensure reproducibility and / or enable the extenssion of the work (Nüst et al. 2020). The Docker definition was made publicly available at https://github.com/FCACollin/ayup_dock.\n3. Results 4. Discussion References Nüst, Daniel, Vanessa Sochat, Ben Marwick, Stephen J Eglen, Tim Head, Tony Hirst, and Benjamin D Evans. 2020. “Ten Simple Rules for Writing Dockerfiles for Reproducible Data Science.” Public Library of Science San Francisco, CA USA. https://doi.org/10.1371/journal.pcbi.1008316.\n"
},
{
	"uri": "https://fcacollin.github.io/guide/",
	"title": "Home",
	"tags": ["hugo", "guide"],
	"description": "",
	"content": "Welcome  R Markdown to PDF  Description of the pipeline converting a R Markdown file into a pdf, and how to modify the configurate the document with options passed to Pandoc and an LaTeX engine.\n Hugo  Lesson learned with Hugo\n "
},
{
	"uri": "https://fcacollin.github.io/guide/rmd_to_pdf.html",
	"title": "R Markdown to PDF",
	"tags": ["R Markdown"],
	"description": "Description of the pipeline converting a R Markdown file into a pdf, and how to modify the configurate the document with options passed to Pandoc and an LaTeX engine.",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/tags/rmd.html",
	"title": "rmd",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/rmd_to_pdf/citations.html",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Nüst et al. (2020)\nNüst, Daniel, Vanessa Sochat, Ben Marwick, Stephen J Eglen, Tim Head, Tony Hirst, and Benjamin D Evans. 2020. “Ten Simple Rules for Writing Dockerfiles for Reproducible Data Science.” Public Library of Science San Francisco, CA USA. https://doi.org/10.1371/journal.pcbi.1008316.\n"
},
{
	"uri": "https://fcacollin.github.io/guide/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/tags/guide.html",
	"title": "guide",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/hugo.html",
	"title": "Hugo",
	"tags": ["hugo"],
	"description": "Lesson learned with Hugo",
	"content": "Welcome "
},
{
	"uri": "https://fcacollin.github.io/guide/tags/hugo.html",
	"title": "hugo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/tags/r-markdown.html",
	"title": "R Markdown",
	"tags": [],
	"description": "",
	"content": ""
}]