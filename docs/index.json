[
{
	"uri": "https://fcacollin.github.io/guide/rmd_to_pdf.html",
	"title": "R Markdown to PDF",
	"tags": ["R Markdown"],
	"description": "R Markdown to PDF: understand the pipeline to enable fine tuning of the resulting PDF documents.",
	"content": "  Understand the pipeline  Description of the pipeline converting a R Markdown file into a pdf, and how to modify the configuration of the document with options passed to Pandoc and an LaTeX engine.\n Templates and extended features  Advanced usage: why and how to use a LaTeX template? How to handle references?\n References    "
},
{
	"uri": "https://fcacollin.github.io/guide/rmd_to_pdf/rmd2pdf_01.html",
	"title": "Understand the pipeline",
	"tags": ["R Markdown", "Pandoc", "LaTeX"],
	"description": "Description of the pipeline converting a R Markdown file into a pdf, and how to modify the configuration of the document with options passed to Pandoc and an LaTeX engine.",
	"content": "1 - Introduction The RStudio environment includes templates of R Markdown documents proposing at selection step to chose PDF output format. It is then easy to render the document, actually simple as a click.\nHow to start a PDF in RStudio: (1) File \u0026gt; New File \u0026gt; RMarkdown \u0026hellip; \u0026gt; Select output PDF and OK; (2) click the knit button at the top of the source pane.  If starting is easy, the click (bait) is hiding complexity as the question of PDF output configuration is more challenging (e.g. add a footnote, change font):\n at least three different nested high-level tools are chained together to handle the R Markdown document (R, Pandoc and a LaTeX engine), fine tuning a PDF document in R consists in passing arguments to the right one using the application interface proposed by R. two or three ways exist to convey configuration instructions: either using a R function arguments, or conveying settings via the yaml front matter of the R Markdown document, or eventually through a configuration file.  The aim of the present page is to provide an overview of the tools involved in the pipeline when triggering the rendering of the PDF document, and how to how to pass configuration elements to the right underlying tool.\n2. Material and Methods A series of minimum working examples were generated to support the demonstration. The examples were built at the same time as the results below were reported, they are available as a GitHub repository: Rmd to PDF. Diagrams were employed to describe the sequence of tools involved in the transformation of the R Markdown document to PDF, they were made possible by the Mermaid framework.\nThe environment for the examples was containerized, a docker image and its definition was used to ensure reproducibility and / or enable the extension of the work (NÃ¼st et al. 2020). The Docker definition was made publicly available at https://github.com/FCACollin/ayup_dock. Note that the image was not originally intended for this specific usage, this explains why it also includes some R packages and LaTeX dependencies not strictly necessary for the examples. However, the image as currently defined was also configured for a research task where pdf reporting was a requirement. Therefore, it was decided to base the example on this image as it shows also how it can be used in production for real-life work.\nThe image includes:\n A rocker/verse image (4.1.0) A series of additional R packages. A series of LaTeX dependencies.  In terms of pdf reporting, this image can:\n handles templates. use bibliographic references.  3 - Results 3.1 - R Markdown: render()/pdf_document() Producing a pdf document from a R Markdown (rmd) input is managed by R, but also involves Pandoc: R pre-process all the R Markdown code chunks and in-line code converting there result in markdown and generating an intermediary markdown file (md), Pandoc handles the conversion of the md file into a pdf document. The rmarkdown\u0026rsquo;s functions render() and pdf_document() are high R level functions which manages most of the features a user might need when generating a report. The options managed by pdf_document() are directly assigned to the right tool to be interpreted simplifying the interaction with the toolchain. For instance, it accepts argument toc resulting in a Table of Content being added to the output, it also accepts keep_md which enables the inspection of the intermediary markdown file.\nsequenceDiagram participant Rmd participant md participant pdf Rmd-md: R md-pdf: pandoc Rmd-pdf: rmarkdown::pdf_document() Note right of Rmd: keep_md=FALSEtoc=TRUE    The options are passed either via the yaml frontmatter (e.g. rmd2pdf_01_03.Rmd) \u0026hellip;\n--- title: \u0026#34;Rmd to PDF\u0026#34; output: pdf_document: keep_md: true toc: true ---   \u0026hellip; Or via an output function. Comparing both syntaxes, the first line in the yaml front matters below \u0026ldquo;output\u0026rdquo; corresponds to the function used by R for configuring the output, (pdf_document) followed by options which find a match in the R function.\nlibrary(rmarkdown) render( input = \u0026#34;rmd2pdf_01_02.Rmd\u0026#34;, output_format = pdf_document(toc = TRUE, keep_md = TRUE) )   render and pdf_document are functions exported by the rmarkdown package. Check ?rmarkdown::pdf_document \u0026rsquo;s help.\n 3.2 - Pass arguments to Pandoc R\u0026rsquo;s function for rendering a pdf document is a high level function. It includes arguments which let the user handle some features of interest for a report, but it is not possible that R\u0026rsquo;s function accounts for all possibilities offered by the downstream tool Pandoc. This is explained by at list two reasons: Pandoc is highly configurable and proposes a very large number of configuration options, Pandoc is an evolving framework, new features are still to be expected in the future. For Pandoc, configuration of an output is handled by variables for LaTeX . In the example above, the option TOC is conveyed to Pandoc directly. In complement, for the variables which are not directly handled by R\u0026rsquo;s function (e.g. the font family), the R argument pandoc_args leaves the door opened for more Pandoc variables for LaTeX (e.g. variable fontfamily).\nsequenceDiagram participant Rmd participant md participant pdf Rmd-+md: R Note right of Rmd: rmarkdown arguments md---pdf: Pandoc Note right of md: Variables For LaTeXfontfamily: libertinus-type1 Rmd-pdf: rmarkdown::pdf_document() Note over Rmd,pdf: keep_md=FALSE, toc=TRUEpandoc_args: fontfamily  The Pandoc variables for LaTeX can be conveyed via:\n  either the R Markdown document yaml front matter \u0026hellip;\n--- title: \u0026#34;Rmd to PDF\u0026#34; output: pdf_document: keep_md: true toc: true fontfamily: libertinus-type1 ---   \u0026hellip; Or the pdf_document() function. Extra lines in the yaml front matter correspond to new pandoc_args list items as built below:\nrmarkdown::render( input = \u0026#34;rmd2pdf_01_03.Rmd\u0026#34;, output_format = rmarkdown::pdf_document( toc = TRUE, pandoc_args = list( \u0026#34;--variable=fontfamily:libertinus-type1\u0026#34; ) ) )   3.3 - Pass arguments to the LaTeX engine For the same reason which explain why R Markdown can not account for all possibilities offered by Pandoc, Pandoc being a high level function for LaTeX can not account for all possibilities offered by a LaTeX engine. Many expected functionalities are translated via Pandoc, for those which are not, R\u0026rsquo;s function open the door via the extra dependency argument.\nsequenceDiagram participant Rmd participant md participant tex participant pdf Rmd-md: R Note right of Rmd: rmarkdown arguments md-+tex: Pandoc Note right of md: Variables For LaTeX tex---pdf: LaTeX engine Note right of tex: Extra depencendiese.g. fancyhdr Rmd-pdf: rmarkdown::pdf_document() Note over Rmd,pdf: keep_md=FALSE, toc=TRUEpandoc_argsextra_dependencies   The yaml front matter is no longer self sufficient, the use of include/in_header points at a supplementary .tex file:  yaml:  --- title: \u0026#34;Rmd to PDF\u0026#34; output: pdf_document: latex_engine: xelatex keep_md: true toc: true includes: in_header: \u0026#34;preamble.tex\u0026#34; mainfont: DejaVuSansMono ---  preambule.tex:  \\usepackage{fancyhdr} \\pagestyle{fancy} \\fancyhead[L]{FCollin}  The use of pdf_document() is an interesting alternative, maybe more compact: rmarkdown::render( input = \u0026#34;rmd2pdf_01_04.Rmd\u0026#34;, output_format = rmarkdown::pdf_document( toc = TRUE, latex_engine = \u0026#34;xelatex\u0026#34;, pandoc_args = list(\u0026#34;--variable=mainfont:DejaVuSansMono\u0026#34;), extra_dependencies = list( rmarkdown::latex_dependency( \u0026#34;fancyhdr\u0026#34;, extra_lines = paste( \u0026#34;\\\\pagestyle{fancy}\u0026#34;, \u0026#34;\\\\fancyhead[L]{FCollin}\u0026#34; ) ) ) ) )   4. Discussion It was evidenced that the original raw pdf as generated by a simple click in RStudio, hides complexity. Entering the detail of this complexity and decomposing the pipeline brings a better understanding of the possible levels of configuration which can be addressed either through the R functions, the Pandoc interface or the LaTeX engine. The configuration of the output is also complex and may take advantage of a knowledge of the Pandoc command line interface, a better understanding of the YAML format for configuration, and a basic knowledge of LaTeX may also help in achieving a very well designed report. This complexity allows an incredible flexibility in the configuration of the reporting.\nHowever, the complexity can also be seen as hurdle: the increase number of programming languages decrease the likelihood of finding contributors who can leverage the whole potential of pdf reporting with R Markdown. To alleviate this difficulty it is also possible to use templates: in other word, the configuration of a pdf output is a one-off, it is a deliverable itself which can be injected in many reporting task (think about it as a corporate Microsoft word template).\nThe pdf reporting as presented above, is an illustration of the mechanisms involved to convert a R Markdown file into a document. The same applies to render docx, html or other: the markdown file being at the cross road and Pandoc involved to the final conversion. As for the pdf documents, all output can take advantage of templates, and markup languages (e.g. LaTeX or html) accepts headers or other additional configuration files.\nReferences NÃ¼st, Daniel, Vanessa Sochat, Ben Marwick, Stephen J Eglen, Tim Head, Tony Hirst, and Benjamin D Evans. 2020. âTen Simple Rules for Writing Dockerfiles for Reproducible Data Science.â Public Library of Science San Francisco, CA USA. https://doi.org/10.1371/journal.pcbi.1008316.\n"
},
{
	"uri": "https://fcacollin.github.io/guide/rmd_to_pdf/rmd2pdf_02.html",
	"title": "Templates and extended features",
	"tags": ["rmd"],
	"description": "Advanced usage: why and how to use a LaTeX template? How to handle references?",
	"content": "1. Introduction In the previous section, the pipeline behind the knit-click from the RStudio interface was scrutinized to understand what tools are actucally involved, what argument they can respectively digest, and how to pass them from the R high level functions. It results that the fine tuning of the output is at hand.\nHowever, the use of these options can be combersum, and may not be very end-user friendly. A sensible user expectation is that once an output is well configured, these should be translated into a template much easier to reuse, hidding the unnecessary complexity, and only showing the options that are desirable. This is where templates becomes handy.\nThis section is providing a demonstration of how the concept of Pandoc templates can be leveraged to set up a report. It is completed by an additional feature, not tied up to the template topic, but so convenient: the handling of references.\n2. Material and Methods A series of minimum working examples was generated to support the demonstration. The examples were built at the same time as the results below were reported.\nThe environment for the examples was containerized, a docker image and its definition was used to ensure reproducibility and / or enable the extenssion of the work (NÃ¼st et al. 2020). The Docker definition was made publicly available at https://github.com/FCACollin/ayup_dock.\nIn addition, the template used for this example was eisvogel, an open-source LaTeX template for Pandoc, available in GitHub. (Wagler and MacFarlane, 2021).\n3. Results 3.1 Use templates The template eisvogel was cloned from the GitHub to a directory pandoc/eisvogel, location given in reference to the own location of the R Markodwn file calling the template. In addition, the file eisvogel.tex was renamed as eisvogel.latex.\nsequenceDiagram participant Rmd participant md participant tex participant pdf Rmd-md: R Note right of Rmd: rmarkdown arguments md-tex: Pandoc Note right of md: LaTeX Variables tex-pdf: LaTeX engine Rmd--pdf: LaTeX template Note right of tex: e.g. Eisvogel Rmd-pdf: rmarkdown::pdf_document() Note over Rmd,pdf: keep_md=FALSE, toc=TRUEpandoc_argsextra_dependenciestemplate  The LaTeX template is simply used through an expected template argument handled by pdf_document. Therefore the yaml fronmt matter is such as:\n--- title: \u0026#34;R Markdown to PDF\u0026#34; subtitle: The compexity can be alleviated with the use of templates\\newline e.g. _Eisvogel_  ([Pascal Wagler](https://github.com/Wandmalfarbe/pandoc-latex-template)) author: FCA Collin date: \u0026#34;`r format(Sys.Date(), \u0026#39;%d %B %Y\u0026#39;)`\u0026#34; output: pdf_document: template: pandoc/eisvogel/eisvogel latex_engine: xelatex titlepage: true titlepage-color: \u0026#34;3F682E\u0026#34; titlepage-rule-color: \u0026#34;FFFFFF\u0026#34; titlepage-text-color: \u0026#34;FFFFFF\u0026#34; --- The template comes with it own arguments, which complete the Pandoc LaTeX variables, that is whjy, to be used, they just need to be declared as extra configuration lines in the yaml section (e.g. titlepage).\nOpen the pdf example.\n 3.2 Manage bibliographic references LaTeX handles bibliographic references with BibTex. Pandoc has developed a filter: citeproc (formerly known as pandoc-citeproc) which handles the markdown citations. For a R Markdown user this is translated into a simple field referencing the BibTeX file. In addition, a Citation Style Language file (csl, Zotero Style Repository) can be referenced, it will manage the inline citation style along with the list of references.\n--- title: \u0026#34;R Markdown to PDF\u0026#34; subtitle: The addition of citation management author: FCA Collin date: \u0026#34;`r format(Sys.Date(), \u0026#39;%d %B %Y\u0026#39;)`\u0026#34; output: pdf_document: template: pandoc/eisvogel/eisvogel toc: true number_sections: true latex_engine: xelatex bibliography: ref/ref.bib csl: ref/csl/field-crops-research.csl titlepage: true titlepage-color: \u0026#34;354C71\u0026#34; titlepage-rule-color: \u0026#34;FFFFFF\u0026#34; titlepage-text-color: \u0026#34;FFFFFF\u0026#34; toc-own-page: true colorlinks: true --- A BibTex list of references is a simple text file as formated below. Note that graphical user interfaces can be used to handle it, such as the lightweight opensource JabRef. Note that the BibTex format is also used for R package citations.\n% Encoding: UTF-8 @Article{Florindo2020, author = {Florindo, Helena F and Kleiner, Ron and Vaskovich-Koubi, Daniella and Ac{\\\u0026#39;u}rcio, Rita C and Carreira, Barbara and Yeini, Eilam and Tiram, Galia and Liubomirski, Yulia and Satchi-Fainaro, Ronit}, title = {Immune-mediated approaches against COVID-19}, journal = {Nature nanotechnology}, year = {2020}, volume = {15}, number = {8}, pages = {630--645}, doi = {10.1038/s41565-020-0732-3}, publisher = {Nature Publishing Group}, } @Misc{Nuest2020, author = {N{\\\u0026#34;u}st, Daniel and Sochat, Vanessa and Marwick, Ben and Eglen, Stephen J and Head, Tim and Hirst, Tony and Evans, Benjamin D}, title = {Ten simple rules for writing Dockerfiles for reproducible data science}, year = {2020}, doi = {10.1371/journal.pcbi.1008316}, publisher = {Public Library of Science San Francisco, CA USA}, } @PhdThesis{Collin2018b, author = {Collin, Francois Christophe}, title = {The tolerance of wheat (Triticum aestivum L.) to Septoria tritici blotch}, school = {The University of Nottingham and LâInstitut des sciences et industries du vivant et de lâenvironnement (AgroParisTech)}, year = {2018}, } @Article{Collin2018, author = {Collin, F and Bancal, P and Spink, J and {Kock Appelgren}, P and Smith, J and Paveley, N D and Bancal, M-O and Foulkes, M J}, title = {Wheat lines exhibiting variation in tolerance of {S}eptoria tritici blotch differentiated by grain source limitation}, journal = {Field Crops Research}, year = {2018}, volume = {217}, pages = {1-- 10}, month = {March}, issn = {0378-4290}, doi = {10.1016/j.fcr.2017.11.022}, groups = {Collin2018}, keywords = {STB}, owner = {fcollin}, timestamp = {2017.12.09}, url = {https://www.sciencedirect.com/science/article/pii/S0378429017312078}, } @Article{Kapica-Topczewska2019a, author = {Kapica-Topczewska, Katarzyna AND Tarasiuk, Joanna AND Collin, Francois AND Brola, Waldemar AND ChorÄÅ¼y, Monika AND Czarnowska, Agata AND KwaÅniewski, MirosÅaw AND Bartosik-Psujek, Halina AND Adamczyk-Sowa, Monika AND Kochanowicz, Jan AND KuÅakowska, Alina}, title = {The effectiveness of interferon beta versus glatiramer acetate and natalizumab versus fingolimod in a Polish real-world population}, journal = {PLOS ONE}, year = {2019}, volume = {14}, number = {10}, pages = {1-12}, month = {10}, doi = {10.1371/journal.pone.0223863}, publisher = {Public Library of Science}, url = {https://doi.org/10.1371/journal.pone.0223863}, } @Comment{jabref-meta: databaseType:bibtex;} In the markdown text, invoking a citation is easy and clear (check for more examples of markdown citations).\n![Schematic representation of SARS-CoV-2 structure. This is an enveloped, positive-sense RNA virus with four main structural proteins, including spike (S) and membrane (M) glycoproteins, as well as envelope (E) and nucleocapsid (N) proteins. Figure and caption from @Florindo2020.\\label{f-intro_covid}](img/florindo2020_covid_drawing.jpg) The figure \\ref{f-intro_covid} cross-referencing is enabled by `\\label{}` and `\\ref{}` commands. It refers to a bibtex reference `@Florindo2020` which is rendered as \u0026#34;@Florindo2020\u0026#34;, along with an entry added to the reference list at the end of the document. The handling of reference is very convenient and still readable in plain text. For instance if I want to refer to reproducible science and Docker images [@Nuest2020] the bracketed reference is added by `[@Nuest2020]`. Several references can be used so I can refer to several items of my PhD in a single reference [@Collin2018;@Collin2018b] with `[@Collin2018;@Collin2018b]`. This citation system is flexible enough to allow free text within the citation call [@Kapica-Topczewska2019a, see the Kaplan-Meir step curves]; this last reference is as: `[@Kapica-Topczewska2019a, see the Kaplan-Meir step curves]`. The text above is rendered in the first section of the document reported below (open the pdf example).\n 4. Discussion R Markdown allows for fine configuration of a pdf document. The large number of options can be substituted by a template file, while keeping scientif authors tools such as a en efficient citation manager at hand.\nThis is only a subset of possibilities, some other tools of interest I personnaly used in plain LaTeX formats includes: might need to be evoked: glossary, list of tables, list of figures, connection of children documents, several pagination styles and starts within a document (an example is added as a supplementary section at the end of this page). I expect them to be also accessible from the R Markdown interface.\nPerpsectives:\n the concept of Pandoc templates is not limited to LaTeX processing, it is also found for instance for docs and html content. Those interested in docx or other output should explore the templating capabilities. the complex examples above use a yaml configuration, but the rendering of the document still relies on rmarkdown::pdf_document(). Once a template is ready and stable, I suggest the next step would be to create and export a custom pdf_document() function such as my_super_report() that would be invoked directly into the yaml front matter, hence, anybody could leverage this new format. --- title: \u0026#34;R Markdown to PDF\u0026#34; author: FCA Collin date: \u0026#34;`r format(Sys.Date(), \u0026#39;%d %B %Y\u0026#39;)`\u0026#34; output: my_super_report ---   References NÃ¼st, Daniel, Vanessa Sochat, Ben Marwick, Stephen J Eglen, Tim Head, Tony Hirst, and Benjamin D Evans. 2020. âTen Simple Rules for Writing Dockerfiles for Reproducible Data Science.â Public Library of Science San Francisco, CA USA. https://doi.org/10.1371/journal.pcbi.1008316.\nWagler, Pascal, and John MacFarlane. 2021. âEisvogel Pandoc Latex Template.â GitHub Wandmalfarbe. https://github.com/Wandmalfarbe/pandoc-latex-template.\nSupplementary Example of complex document handled by LaTeX, all the options used in this document are accessible from the R Markdown interface (Collin 2018, PhD manuscript):\n "
},
{
	"uri": "https://fcacollin.github.io/guide/rmd_to_pdf/citations.html",
	"title": "References",
	"tags": ["rmd"],
	"description": " ",
	"content": "NÃ¼st, Daniel, Vanessa Sochat, Ben Marwick, Stephen J Eglen, Tim Head, Tony Hirst, and Benjamin D Evans. 2020. âTen Simple Rules for Writing Dockerfiles for Reproducible Data Science.â Public Library of Science San Francisco, CA USA. https://doi.org/10.1371/journal.pcbi.1008316.\nWagler, Pascal, and John MacFarlane. 2021. âEisvogel Pandoc Latex Template.â GitHub Wandmalfarbe. https://github.com/Wandmalfarbe/pandoc-latex-template.\n"
},
{
	"uri": "https://fcacollin.github.io/guide/faq.html",
	"title": "FAQ",
	"tags": ["tmux", "Docker"],
	"description": "Frequently Asked Questions",
	"content": " Docker How to push a Docker image to Docker Hub?  docker tag fc-nmosd fcacollin/fc-nmosd docker logout docker login docker push fcacollin/fc-nmosd  How to save a Docker image locally?  docker save fc-nmosd -o fc-nmosd.tar - test  How to remove Docker images?  To remove all danding image: docker image prune. To remove all unused images: docker image prune --all. To remove an image docker image rm To delete all images docker rmi -f $(docker images -a -q)   TMUX How to copy-paste with tmux?  navigation ctrl + [ start selection ctrl + space copy selection ctrl + w paste selection ctrl + [  "
},
{
	"uri": "https://fcacollin.github.io/guide/tags/docker.html",
	"title": "Docker",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/",
	"title": "Home",
	"tags": ["hugo", "guide"],
	"description": "",
	"content": "Welcome  R Markdown to PDF  R Markdown to PDF: understand the pipeline to enable fine tuning of the resulting PDF documents.\n FAQ  Frequently Asked Questions\n "
},
{
	"uri": "https://fcacollin.github.io/guide/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/tags/tmux.html",
	"title": "tmux",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/tags/latex.html",
	"title": "LaTeX",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/tags/pandoc.html",
	"title": "Pandoc",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/tags/r-markdown.html",
	"title": "R Markdown",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/tags/rmd.html",
	"title": "rmd",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/tags/guide.html",
	"title": "guide",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://fcacollin.github.io/guide/tags/hugo.html",
	"title": "hugo",
	"tags": [],
	"description": "",
	"content": ""
}]